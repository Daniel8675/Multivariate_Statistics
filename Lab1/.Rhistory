6+7
demo(graphics)
6+7
demo(graphics)
plot(sin,-pi,pi)
v<-c(1,-3,pi,0,exp(1),3/7)
v
length(v)
w<-7:12
w
x<-rep(1,300)
x
v/w
v+w
v-w
v*w
y<-c("zielony","czerwony","pomarańczowy")
y
z<-c(v,w,x,y)
z
A <- matrix( c(2,0,-1,3,0,1,2,-1,-1,3,3,-2,4,-3,0) , nrow=3 ,ncol=5)
A
A <- matrix( c(2,0,-1,3,0,1,2,-1,-1,3,3,-2,4,-3,0) , 3 ,5)
A
A <- matrix( c(2,0,-1,3,4,-1,1,-1,-3,-3,-3,2,0,-2,0) , 3 ,5)
A
A1 <- matrix( nrow=3 ,  ncol=5 )
A1
B <- matrix( c(2,0,-1,3,0,1,2,-1,-1,3,3,-2,4,-3,0) , 3 ,5, byrow=TRUE)
B
A+B
A%*%B
A*B
solve(A)
t(A)
det(A)
chol(A)
cbind(v,w)
dane <- c(1:12,-3.9,-5.9,-6.3,1.3,7.8,7.0,11.3,12.3,4.8,3,-2.9,-2)
nazwy <- list(c("Miesiąc", "Temperatura"), c("Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"))
W <- matrix( dane , 2 , 12, byrow=TRUE ,  dimnames = nazwy)
W
W[2,1]
W[2,]
W,2
W[,2]
W[,3:5]
W[,c(1,3,4,11)]
W[,-c(1,3,4,11)]
setwd("D:/R/Labolatoria/Lab1")
help("c")
?c
??vecotr
??vector
x <- 10
2 -> y.z
._e = 34.5
x
y.z
._e
ls()
rm(x)
rm(list = ls())
typeof(2)
mode(2)
typeof(2L)
mode(2L)
x <- c(2, 10, 17)
x
length(x)
y <- c(c(2, 3), 10, c(3, 2, -1))
y
lenght(y)
length(y)
z1 <- rep(x, times = 3)
z1
z2 <- rep(x, each = e)
z2 <- rep(x, each = 3)
z2
z3 <- rep(x, length.out = 5)
z3
2:10
seq(2, 10)
seq(from = 2, to = 10)
seq(from = 10, to = 2)
10:2
seq(2, 10, by = 2)
seq(2, 10, length.out = 8)
seq(2, 10, along.with = x)
seq_along(x)
x + c(1, 0, -1)
1:4 * 2:5
1:4 * 2:6
1:4 * 2:4
1:4 * 2:5
x^2
exp(y)
sqrt(seq(0, 1, by = 0.1))
x * 3 + 1
y + 1:4
mean(x)
median(y)
var(rep(1, times = 20))
?var
sd(2 * y - 3)
max(x)
which.min(x)
sum(x^2)
x[1]
x[3]
x[c(1, 3)]
y[2:4]
x[-2]
y[-1:-3]
x[[2]]
x[2][1]
x[2]
y[[10]]
x == c(1, 2, 3)
x > 10
x * y^2 < 30
y > 0 & y < 5
y > 0 && y < 5
all( y > 0 && y < 5)
all(y > 0 && y < 5)
all(y > 0 & y < 5)
any(y > 0 & y < 5)
y[c(TRUE, FALSE, FALSE, FALSE, FALSE, TRUE)]
y[y>0 & y <5]
y[y > median(y)]
y[y < mean(y)]
sum(y > 0)
sum(y < mean(y))
s <- c("Ala", "Ola", 'Ula')
s
s[2]
s[2][1]
s[[2]]
paste(s, collapse = '-')
paste(s, 1:6)
paste(s, 1:6, sep = "")
paste(s, 1:6, sep = "", collapse = "===")
as.numeric("32")
as.logical("true")
isFALSE(NA)
isTRUE(NA)
is.na(NA)
z <- c(1, 2)
z[5] <- 10
z
z + 3
z + 27
z == 1
z == NA
is.na(z)
z[!is.na(z)]
mean(z)
mean(z[!is.na(z)])
mean(z, na.rm = TRUE)
z[is.na(z)] <- -1
z
x[5]
x[[5]]
x[5][1]
nx <- c(a = 2, b = -10, c = 0)
nx
nx['a']
nx[c("a", "b")]
nx[["c"]]
names(nx)
names(nx) <- c('pierwszy', 'drugi', 'trzeci')
nx
nx['drugi']
m <- matrix(c(1, 2, 3, 4), nrow = 2)
m
class(n)
class(m)
dim(m)
m2 <- c(1,2,3,4)
dim(m2)
m2
class(m2)
dim(m2) <- c(1,4)
m2
m2
class(m2)
matrix()
matrix(c(1,2,3,4), ncol = 2, byrow = TRUE)
m <- matrix(1:4, nrow = 2)
m^2
m
sqrt(m) + matrix(rep(1, times = 4), nrow = 2)
m + 1
m < 2
m[1, 2]
m[2, 2] <- 0
m
m[2,]
m[,1]
m[1,] <- -1
m
m1 <- matrix(1:4, nrow = 2)
m1
m2 <- diag(nrow = 2)
n2
m2
m1 * m2
m * m1
m1 %*% m2
A <- matrix(1:4, nrow = 2)
b <- c(1, 0)
solve(A, b)
t(A)
solve(A)
det(A)
sum(diag(A))
if (runif(1) > 0.5){}
if (runif(1) > 0.5){'Orzeł'}
if (runif(1) > 0.5){
'Orzeł'
} else {
'Reszka'
}
x <- runif(20)
x
?runif
rzuty <- ifelse(x > 0.5, 'Orzeł', 'Reszka')
rzuty
liczba_orlow <- 0
while (runif(1) > 0.5) {
liczba_orlow <- liczba_orlow + 1
}
}
while (runif(1) > 0.5) {
liczba_orlow <- liczba_orlow + 1
}
while (runif(1) > 0.5) {
liczba_orlow <- liczba_orlow + 1
}
liczba_orlow
liczba_orlow <- 0
repeat{
if (runif(1) > 0.5) break
liczba_orlow <- liczba_orlow + 1
}
liczba_orlow
x <- runif(20)
x
for (i in seq_along(x)){
print(mean(x[1:i]))
}
f <- function(x, a = 2) x^2 + 10 * a
g <- function(z) {
stopifnot(all(z > 0))
sin(z^2) - pi
}
h <- function(x){
if(x < 0){
return(x + 10)
}
cos(x - 1)
}
f(10)
f(10, 4)
f(a = -1, x = 3)
f(c(-1, 1))
g(3)
g(-3)
h(-1)
h(10)
x <- sample(1:1000, 100, replace = TRUE)
hist(x)
hist(x, freq = FALSE)
hist(x, breaks = 4)
hist(x, breaks = c(0, 210, 650, 884, 1000))
x
?hist
boxplot(x)
boxplot(x, horizontal = TRUE)
x <- sample(1:1000, 100, replace = TRUE)
y <- sample(1:1000, 100, replace = TRUE)
plot(x, y)
plot(x, y, xlab = "Zmienna x", ylab = "Zmienna y", main = "Wykres y względem x")
x <- seq(-pi, pi, length.out = 100)
plot(x, sin(x), type = "l", ylab = "y")
lines(x, cos(x), type = "l", col = "orange")
library(MASS)
install.packages('ISLR')
l <- list(a = c(2, 3, 4), f = function(x) sum(x^2), b = 'Ala ma kota')
l[1]
l[1][2]
l[2]
l[2](3)
l[[1]]
l[[1]][2]
l[[2]]
l[[2]](3)
l[['a']]
l&a
l$a
l[['a']][2]
l$a[2]
l$f(3)
f <- function() {
list(x = 10, y = 32)
}
f()$x
directions <- factor(c("N", "E", "S", "W", "E", "E", "N", "S"))
directions
table(directions)
pressures <- factor(c("High", "High", "Low", "Medium", "Low", "Low"), levels = c("Low", "Medium", "High"), ordered = TRUE)
pressure
pressures
table(pressures)
x <- sample(1:10, 100, replace = TRUE)
y <- sample(1:1000/1000, 100, replace = TRUE)
plot(x, y)
fx <- factor(x)
plot(fx, y)
x <- 1
class(x)
class(x) <- 'lol'
class(x)
inherits(x, 'lol')
inherits(x, 'numeric')
inherits(2, 'numeric')
class(x) <- c('Ala', 'Ola', 'Ula')
class(x)
inherits(x, 'Ala')
inherits(x, c('Ola', 'Ela', 'Ala'))
inherits(x, c('Ola', 'Ela', 'Ala'), which = True)
inherits(x, c('Ola', 'Ela', 'Ala'), which = TRUE)
print.super_fighter <- function(x) {
print(paste("Super fighter", x))
}
z <- 1
class(z) <- 'super_fighter'
z
dnorm(2.3)
pnorm(2.3)
x1 <- rnorm(10)
mean(x1)
var(x1)
sd(x1)
x2 <- rnorm(10, mean = 1, sd = 5)
mean(x2)
var(x2)
sd(x2)
x2
rnorm(10)
rnorm(10)
set.seed(2020)
rnorm(10)
rnorm(10)
set.seed(2020)
rnorm(10)
x <- seq(-pi, pi, length.out = 100)
y <- x
f <- outer(x, y, function(x, y) cos(y) / (1 + x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45)
fa <- (f - t(f)) / 2
contour(x, y, fa, nlevels = 15)
image(x, y, f)
image(x, y, f, col = topo.colors(32, alpha = 1))
contour(x, y, f, add = TRUE)
persp(x, y, f)
persp(x, y, f, theta = 30)
persp(x, y, f, theta = 30, phi = 40)
persp(x, y, f, theta = 30, phi = 40, shade = 0.75, border = NA)
df <- data.frame(nazwa = c("Tatooine", "Dagobah", "Hoth"),
srednica = c(20, 37.4, 11.22),
klimat = factor(c("pustynia", "bagno", "snieg")))
df
df$srednica
df[, 2]
df[2]
df[2,]
df[, 2]
Auto <- read.table('Auto.data')
class(Auto)
Auto
Auto <- read.table('Auto.data', header = TRUE, na.strings = ?)
Auto <- read.table('Auto.data', header = TRUE, na.strings = '?')
names(Auto)
head(Auto)
Auto <- read.csv('Auto.csv', header = TRUE, na.strings = '?')
head(Auto)
dim(Auto)
Auto <- na.omit(Auto)
dim(Auto)
Auto[2, 5]
Auto[2, 'weight']
Auto[, 5]
Auto[, 'weight']
Auto[1:4]
Auto[1:4, ]
Auto[3:10, c(2,5)]
Auto$mpg
Auto$weight[1:4]
Auto$cylinders[Auto$mpg > 30]
attach(Auto)
?attach
mpg
mpg[mpg > 30]
cylinders[mpg > 30]
Auto[mpg > 30, ]
Auto[mpg > 30, 'weight']
plot(cylinders, mpg)
plot(as.factor(cylinders), mpg)
hist(mpg)
hist(mpg, col = 'red')
hist(mpg, col = 'red', breaks = 15)
pairs(Auto)
pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, data = Auto)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
identify(horsepower, mpg, name)
?identify
plot(horsepower, mpg)
?identify
plot(horsepower, mpg)
identify(horsepower, mpg, name)
summary(Auto)
summary(mpg)
View(Auto)
ls()
rm(lsit = ls())
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
install.packages('ISLR')
attach(Auto)
Auto <- read.csv('Auto.csv', header = TRUE, na.strings = '?')
Auto <- read.csv('Auto.csv', header = TRUE, na.strings = '?')
head(Auto)
attach(Auto)
mean(mpg)
names(Auto)
Auto[cylinders == 4]
Auto[cylinders == 4, mpg]
Auto[cylinders == 4, 'mpg']
Auto$mpg[cylinders == 4]
Auto$mpg[cylinders == 4]
mean(Auto$mpg[cylinders == 4])
Auto[cylinders == 4, ]
mean(Auto$mpg[cylinders == 4])
median(Auto$weight)
mean(Auto$mpg[year == 72])
var(Auto$acceleration)
var(Auto$acceleration[origin == 3])
sum(Auto$name[horsepower > mean(horsepower)])
sum(Auto[horsepower > mean(horsepower)])
sum(Auto[horsepower > mean(horsepower), ])
sum(horsepower > mean(horsepower))
horsepower > mean(horsepower)
attach(Auto)
Auto <- na.omit(Auto)
Auto <- na.omit(Auto)
attach(Auto)
horsepower > mean(horsepower)
sum(horsepower > mean(horsepower))
Auto$horsepower[weight < mean(weight)]
max(Auto$horsepower[weight < mean(weight)])
sum(mpg > mean(mpg))
min(Auto$cylinders[mpg > mean(mpg)])
sum(displacement == max(displacement))
max(Auto$weight[displacement < median(displacement)])
